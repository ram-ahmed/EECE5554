// Generated by gencpp from file sensor_fusion/convert_to_quaternion_datatypeRequest.msg
// DO NOT EDIT!


#ifndef SENSOR_FUSION_MESSAGE_CONVERT_TO_QUATERNION_DATATYPEREQUEST_H
#define SENSOR_FUSION_MESSAGE_CONVERT_TO_QUATERNION_DATATYPEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_fusion
{
template <class ContainerAllocator>
struct convert_to_quaternion_datatypeRequest_
{
  typedef convert_to_quaternion_datatypeRequest_<ContainerAllocator> Type;

  convert_to_quaternion_datatypeRequest_()
    : deg_yaw(0.0)
    , deg_pitch(0.0)
    , deg_roll(0.0)  {
    }
  convert_to_quaternion_datatypeRequest_(const ContainerAllocator& _alloc)
    : deg_yaw(0.0)
    , deg_pitch(0.0)
    , deg_roll(0.0)  {
  (void)_alloc;
    }



   typedef double _deg_yaw_type;
  _deg_yaw_type deg_yaw;

   typedef double _deg_pitch_type;
  _deg_pitch_type deg_pitch;

   typedef double _deg_roll_type;
  _deg_roll_type deg_roll;





  typedef boost::shared_ptr< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct convert_to_quaternion_datatypeRequest_

typedef ::sensor_fusion::convert_to_quaternion_datatypeRequest_<std::allocator<void> > convert_to_quaternion_datatypeRequest;

typedef boost::shared_ptr< ::sensor_fusion::convert_to_quaternion_datatypeRequest > convert_to_quaternion_datatypeRequestPtr;
typedef boost::shared_ptr< ::sensor_fusion::convert_to_quaternion_datatypeRequest const> convert_to_quaternion_datatypeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator1> & lhs, const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.deg_yaw == rhs.deg_yaw &&
    lhs.deg_pitch == rhs.deg_pitch &&
    lhs.deg_roll == rhs.deg_roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator1> & lhs, const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_fusion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9325c181bdd22d8eac55b18f84a5eef";
  }

  static const char* value(const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9325c181bdd22d8ULL;
  static const uint64_t static_value2 = 0xeac55b18f84a5eefULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_fusion/convert_to_quaternion_datatypeRequest";
  }

  static const char* value(const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 deg_yaw\n"
"float64 deg_pitch\n"
"float64 deg_roll\n"
;
  }

  static const char* value(const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deg_yaw);
      stream.next(m.deg_pitch);
      stream.next(m.deg_roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct convert_to_quaternion_datatypeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_fusion::convert_to_quaternion_datatypeRequest_<ContainerAllocator>& v)
  {
    s << indent << "deg_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.deg_yaw);
    s << indent << "deg_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.deg_pitch);
    s << indent << "deg_roll: ";
    Printer<double>::stream(s, indent + "  ", v.deg_roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_FUSION_MESSAGE_CONVERT_TO_QUATERNION_DATATYPEREQUEST_H
